<div class="filter_by_trade govuk-grid-column-one-quarter">
  <div class="govuk-grid-row govuk-table__header filter_by_trade_heading">
    <div class="govuk-grid-column-one-half">
      <p class="govuk-body-m govuk-!-font-weight-bold">Apply filters</p>
    </div>
    <div class="govuk-grid-column-one-half">
      <button id="clearFilters" class='clear-all-filters govuk-body-s'>Clear filters</button>
    </div>
  </div>

  <div class="govuk-form-group">
    <fieldset class='govuk-fieldset trade-filter'>
      <div class="trade-filter-collapsible-header">
        <h4 class="govuk-heading-s">Trade</h4>
        <i class="trade-filter-collapsible up-arrow"></i>
      </div>

      <div class="hackney-checkboxes">
        <% @work_order.property.trades.each_with_index do |trade, index| %>
          <div class="trade-filter-options govuk-body-s">
            <input id="trade-<%=index%>" class='filter-checkbox' type="checkbox" value="trade-<%=index%>">
            <label class="hackney-checkboxes__label" for="trade-<%=index%>">
              <%= trade %>
            </label>
          </div>
        <% end %>
      </div>

    </fieldset>
  </div>
</div>

<script>
  (function () {
    var filterCheckBoxes = [];
    var workOrders = [];

    function handleToggleTrade() {
      filterCheckBoxes = document.querySelectorAll('.filter-checkbox:checked');
      workOrders = document.querySelectorAll('.hackney-work-order-rows');

      var showTheseTrades = [];

      for(var i = 0; i < filterCheckBoxes.length; i++) {
        showTheseTrades.push(filterCheckBoxes[i].id);
      }

      if (showTheseTrades.length == 0) {
        for(var i = 0; i < workOrders.length; i++) {
          workOrders[i].classList.remove('hidden');
        }
      } else {

        for(var i = 0; i < workOrders.length; i++) {
          workOrders[i].classList.add('hidden');
          if (showTheseTrades.includes(workOrders[i].getAttribute("data-trade"))) {
            workOrders[i].classList.remove('hidden');
          }
        }
      }
    }

    function handleClearAllFilters() {
      for(var i = 0; i < filterCheckBoxes.length; i++) {
        filterCheckBoxes[i].checked = false;
      }
      for(var i = 0; i < workOrders.length; i++) {
        workOrders[i].classList.remove('hidden');
      }
    }

    function collapsibleTradeFilter() {
      var collapsible = document.querySelector(".trade-filter-collapsible");
      var content = document.querySelector('.hackney-checkboxes');

      if (content.style.display === "none") {
        content.style.display = "block";
        collapsible.classList.remove('up-arrow');
        collapsible.classList.add('up-arrow');
      } else {
        content.style.display = "none";
        collapsible.classList.remove('up-arrow');
        collapsible.classList.add('down-arrow');
      }
    }

    var checkboxes = document.querySelectorAll('.filter-checkbox');
    for(var i = 0; i < checkboxes.length; i++) {
      checkboxes[i].addEventListener('click', handleToggleTrade);
    }

    document.getElementById('clearFilters').addEventListener('click', handleClearAllFilters);

    document.querySelector('.trade-filter-collapsible-header').addEventListener('click', collapsibleTradeFilter);
  })();
</script>
